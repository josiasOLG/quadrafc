import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { JogosService } from '../modules/jogos/jogos.service';
import { PalpitesService } from '../modules/palpites/palpites.service';
import { RodadasService } from '../modules/rodadas/rodadas.service';
import { TransacoesMoedasService } from '../modules/transacoes-moedas/transacoes-moedas.service';
import { UsersService } from '../modules/users/users.service';

@Injectable()
export class SeedService implements OnModuleInit {
  private readonly logger = new Logger(SeedService.name);

  constructor(
    private configService: ConfigService,
    private usersService: UsersService,
    private rodadasService: RodadasService,
    private jogosService: JogosService,
    private palpitesService: PalpitesService,
    private transacoesMoedasService: TransacoesMoedasService
  ) {}

  async onModuleInit() {
    const shouldSeed = this.configService.get('NODE_ENV') === 'development';

    this.logger.log(`üîç NODE_ENV: ${this.configService.get('NODE_ENV')}`);
    this.logger.log(`üîç Should seed: ${shouldSeed}`);

    if (shouldSeed) {
      // Verificar se j√° foi executado verificando apenas usu√°rios existentes
      const usersExistentes = await this.usersService.getRankingIndividual();

      this.logger.log(`üìä Estado atual: ${usersExistentes.data.length} usu√°rios`);

      if (usersExistentes.data.length > 10) {
        this.logger.log('‚úÖ Seed j√° foi executado anteriormente - pulando execu√ß√£o');
        this.logger.log('üí° Para executar novamente, limpe o banco de dados primeiro');
        this.logger.log(`üìä Encontrados: ${usersExistentes.data.length} usu√°rios`);
        return;
      }

      this.logger.log(
        'üå± Iniciando seed √öNICA VEZ para regi√£o serrana do RJ (Petr√≥polis e Paty do Alferes)...'
      );
      await this.seedAllData();
      this.logger.log('‚úÖ QuadraFC da regi√£o serrana est√° pronto! üèîÔ∏è‚öΩ');
      this.logger.log('üéØ Competi√ß√£o por bairros ativa em Petr√≥polis e Paty do Alferes!');
      this.logger.log('üîí Seed finalizado - n√£o executar√° novamente automaticamente');
    } else {
      this.logger.log('‚è∏Ô∏è Seed desabilitado - NODE_ENV n√£o √© development');
    }
  }

  private async seedAllData() {
    try {
      // Verificar estado atual dos dados
      const usersExistentes = await this.usersService.getRankingIndividual();

      const hasUsers = usersExistentes.data.length > 0;

      this.logger.log(
        'üèîÔ∏è Verificando dados para a regi√£o serrana - Petr√≥polis e Paty do Alferes...'
      );
      this.logger.log(`    Usu√°rios: ${usersExistentes.data.length} existentes`);

      // Se j√° tem usu√°rios, pular
      if (hasUsers) {
        this.logger.log('‚úÖ Dados completos j√° existem, pulando seed...');
        return;
      }

      // 1. Criar usu√°rios
      this.logger.log('üë• Executando seed de usu√°rios...');
      await this.seedUsers();

      // 2. Criar rodadas hist√≥ricas
      await this.seedRodadas();

      // 3. Pular jogos (gerados pela API real)
      this.logger.log('‚öΩ Pulando cria√ß√£o de jogos - ser√£o sincronizados da API real');

      // 4. Criar palpites hist√≥ricos (s√≥ se houver jogos)
      const jogosExistentes = await this.jogosService.findAll();
      if (jogosExistentes.length > 0) {
        await this.seedPalpites();
      } else {
        this.logger.log('üéØ Pulando palpites - nenhum jogo encontrado ainda');
      }

      // 5. Criar transa√ß√µes de moedas
      await this.seedTransacoes();
    } catch (error) {
      this.logger.error('‚ùå Erro durante o seed:', error);
    }
  }

  private async seedUsers() {
    try {
      this.logger.log('üë• Criando usu√°rios realistas de Petr√≥polis e Paty do Alferes...');

      // Verificar quantos usu√°rios j√° existem para evitar duplicatas
      const usersExistentes = await this.usersService.getRankingIndividual();
      if (usersExistentes.data.length > 0) {
        this.logger.log(
          `‚ö†Ô∏è ${usersExistentes.data.length} usu√°rios j√° existem, pulando cria√ß√£o de usu√°rios para evitar duplicatas`
        );
        return;
      }

      // Lista de bairros dispon√≠veis (agora como strings simples)
      const bairrosDisponiveis = [
        // Petr√≥polis - RJ
        { nome: 'Centro', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Quitandinha', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Retiro', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Valpara√≠so', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Itaipava', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Cascatinha', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Alto da Serra', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Bingen', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Coronel Veiga', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Mosela', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Pedro do Rio', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Posse', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Corr√™as', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Araras', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Nogueira', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Duarte da Silveira', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'S√£o Sebasti√£o', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Meio da Serra', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Carangola', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Quarteir√£o Brasileiro', cidade: 'Petr√≥polis', estado: 'RJ' },

        // Paty do Alferes - RJ
        { nome: 'Centro', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Avelar', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Arcozelo', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Werneck', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Cacaria', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'S√£o Jos√© do Turvo', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Queluz de Minas', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Palmital', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Governador Portela', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'S√£o Jo√£o Marcos', cidade: 'Paty do Alferes', estado: 'RJ' },
      ];

      this.logger.log(`ÔøΩ ${bairrosDisponiveis.length} bairros dispon√≠veis para os usu√°rios`);
      const nomesBrasileiros = [
        // Nomes t√≠picos da regi√£o serrana do RJ
        'Carlos Eduardo Silva',
        'Ana Beatriz Santos',
        'Jo√£o Pedro Oliveira',
        'Maria Clara Costa',
        'Pedro Henrique Souza',
        'Fernanda Cristina Lima',
        'Rafael dos Santos Pereira',
        'Juliana Aparecida Alves',
        'Lucas Gabriel Ferreira',
        'Camila Vit√≥ria Rocha',
        'Thiago Augusto Martins',
        'Larissa Fernanda Barbosa',
        'Bruno Henrique Ribeiro',
        'Priscila dos Santos Dias',
        'Andr√© Luis Gomes',
        'Let√≠cia Maria Cardoso',
        'Mateus Felipe Ara√∫jo',
        'Gabriela Cristiane Mendes',
        'Felipe Augusto Castro',
        'Bianca Aparecida Moreira',
        'Rodrigo Ant√¥nio Azevedo',
        'Nat√°lia Cristina Reis',
        'Vinicius Eduardo Correia',
        'Amanda Fernanda Teixeira',
        'Gustavo Henrique Nunes',
        'Isabella Vit√≥ria Freitas',
        'Diego Luiz Carvalho',
        'Sophia Maria Ramos',
        'Henrique dos Santos Monteiro',
        'Yasmin Cristina Torres',
        'Leonardo Augusto Pinto',
        'Manuela Aparecida Cruz',
        'Ricardo Luiz Fernandes',
        'Eduarda Beatriz Campos',
        'Marcelo Antonio Vieira',
        'Luana Cristiane Rodrigues',
        'Guilherme Eduardo Miranda',
        'Beatriz Fernanda Santana',
        'Caio Henrique Nascimento',
        'Marina Vit√≥ria Sales',
        'Daniel Augusto Caldeira',
        'Renata Aparecida Moraes',
        'Victor Hugo dos Santos',
        'Carolina Maria Machado',
        'Samuel Eduardo Lopes',
        'Isadora Cristina Cunha',
        'Nicolas Gabriel Borges',
        'Valentina dos Santos Duarte',
        'Arthur Henrique Melo',
        'Giovanna Beatriz Farias',

        // Mais nomes para ter uma base robusta
        'Roberto Carlos da Silva',
        'Patr√≠cia Fernanda Almeida',
        'Jos√© Eduardo Rodrigues',
        'Luciana Aparecida Costa',
        'Marcos Antonio Pereira',
        'Vanessa Cristina Souza',
        'Alexandre dos Santos Lima',
        'D√©bora Maria Oliveira',
        'Fernando Luiz Barbosa',
        'Adriana Beatriz Martins',
        'Maur√≠cio Henrique Gomes',
        'Tatiana Fernanda Ribeiro',
        'F√°bio Eduardo Castro',
        'Simone Aparecida Dias',
        'Paulo Roberto Ara√∫jo',
        'M√°rcia Cristina Mendes',
        'S√©rgio Augusto Moreira',
        'Cristiane dos Santos Azevedo',
        'Ant√¥nio Carlos Reis',
        'Ros√¢ngela Maria Correia',
        'Eduardo Henrique Teixeira',
        'Silvia Aparecida Nunes',
        'Luiz Fernando Freitas',
        'Denise Cristina Carvalho',
        'Wagner dos Santos Ramos',
        'Cl√°udia Maria Monteiro',
        'Rog√©rio Augusto Torres',
        'Vera L√∫cia Pinto',
        'Edson Eduardo Cruz',
        'Solange Aparecida Fernandes',
        'J√∫lio C√©sar Campos',
        'Teresa Cristina Vieira',
        'Gilberto dos Santos Rodrigues',
        'Concei√ß√£o Maria Miranda',
        'Nelson Henrique Santana',
        'Rosa Maria Nascimento',
        'Osvaldo Augusto Sales',
        'Irani Aparecida Caldeira',
        'Milton Eduardo Moraes',
        'Neusa dos Santos Silva',
        'Francisco Carlos Machado',
        'Ivone Cristina Lopes',
        'Sebasti√£o Luis Cunha',
        'Marlene Aparecida Borges',
        'Benedito Henrique Duarte',
        'Zilda Maria Melo',
        'Geraldo dos Santos Farias',
        'Neuza Cristina Almeida',
        'Waldir Augusto Rodrigues',
        'Dirce Aparecida Costa',
      ];

      for (let i = 0; i < nomesBrasileiros.length; i++) {
        const nome = nomesBrasileiros[i];
        const email =
          nome
            .toLowerCase()
            .replace(/\s+/g, '.')
            .replace(/√ß/g, 'c')
            .replace(/[√°√†√£√¢]/g, 'a')
            .replace(/[√©√™√´]/g, 'e')
            .replace(/[√≠√Æ√Ø]/g, 'i')
            .replace(/[√≥√¥√µ√∂]/g, 'o')
            .replace(/[√∫√ª√º]/g, 'u') + '@email.com';

        const bairro = bairrosDisponiveis[Math.floor(Math.random() * bairrosDisponiveis.length)];

        // Pontos variados para criar um ranking interessante
        // Usu√°rios de Petr√≥polis tendem a ter mais pontos (cidade maior)
        const basePontos = bairro.cidade === 'Petr√≥polis' ? 300 : 150;
        const totalPoints = Math.floor(Math.random() * 2500) + basePontos;
        const moedas = Math.floor(totalPoints * 0.12) + Math.floor(Math.random() * 800);

        // Algumas medalhas aleat√≥rias baseadas na performance
        const medalhas = [];
        if (totalPoints > 400) medalhas.push('Primeira Vit√≥ria');
        if (totalPoints > 800) medalhas.push('Especialista');
        if (totalPoints > 1200) medalhas.push('Veterano da Serra');
        if (totalPoints > 1800) medalhas.push('Mestre dos Palpites');
        if (totalPoints > 2200) medalhas.push('Lenda Imperial');
        if (Math.random() > 0.8) medalhas.push('Sequ√™ncia de Ouro');
        if (Math.random() > 0.9) medalhas.push('Acertou na Mosca');

        this.logger.debug(
          `üë§ Criando usu√°rio ${i + 1}/${nomesBrasileiros.length}: ${nome} (${bairro.nome}, ${bairro.cidade}) - ${totalPoints} pontos`
        );

        // Criar usu√°rio
        await this.usersService.create({
          nome: nome,
          email,
          password: '123456', // Senha padr√£o para testes
          // Campos do onboarding para usu√°rios de seed
          data_nascimento: new Date(
            1985 + Math.floor(Math.random() * 25),
            Math.floor(Math.random() * 12),
            Math.floor(Math.random() * 28) + 1
          ),
          telefone: `(24) 9${Math.floor(Math.random() * 10000)
            .toString()
            .padStart(4, '0')}-${Math.floor(Math.random() * 10000)
            .toString()
            .padStart(4, '0')}`,
          cidade: bairro.cidade,
          estado: bairro.estado,
          bairro: bairro.nome, // Agora usando apenas o nome do bairro como string
        });

        // Atualizar pontos e moedas do usu√°rio criado
        const user = await this.usersService.findByEmail(email);
        if (user) {
          user.totalPoints = totalPoints;
          user.moedas = moedas;
          user.medals = medalhas;
          await user.save();

          this.logger.debug(
            `‚úÖ Usu√°rio ${nome} (${totalPoints} pts) criado no bairro ${bairro.nome}`
          );
        }

        // Log de progresso a cada 10 usu√°rios
        if ((i + 1) % 10 === 0) {
          this.logger.log(`üìà Progresso: ${i + 1}/${nomesBrasileiros.length} usu√°rios criados`);
        }
      }

      this.logger.log(`‚úÖ ${nomesBrasileiros.length} usu√°rios criados com rankings realistas!`);

      // EXIBIR ESTAT√çSTICAS DOS USU√ÅRIOS CRIADOS POR BAIRRO
      this.logger.log('ÔøΩ Exibindo estat√≠sticas dos usu√°rios criados por bairro...');

      const todosUsuarios = await this.usersService.getRankingIndividual();

      // Agrupar usu√°rios por bairro/cidade para estat√≠sticas
      const estatisticasPorBairro = new Map();

      for (const user of todosUsuarios.data) {
        const chave = `${user.bairro}-${user.cidade}`;
        if (!estatisticasPorBairro.has(chave)) {
          estatisticasPorBairro.set(chave, {
            bairro: user.bairro,
            cidade: user.cidade,
            estado: user.estado,
            usuarios: [],
            totalPontos: 0,
          });
        }

        const stats = estatisticasPorBairro.get(chave);
        stats.usuarios.push(user);
        stats.totalPontos += user.totalPoints || 0;
      }

      // Converter para array e ordenar por total de pontos
      const bairrosStats = Array.from(estatisticasPorBairro.values()).sort(
        (a, b) => b.totalPontos - a.totalPontos
      );

      const bairrosPetropolis = bairrosStats.filter((b) => b.cidade === 'Petr√≥polis');
      const bairrosPatyAlferes = bairrosStats.filter((b) => b.cidade === 'Paty do Alferes');

      this.logger.log(`üìä Estat√≠sticas finais dos usu√°rios por bairro:`);
      this.logger.log(`   ‚Ä¢ ${bairrosPetropolis.length} bairros representados em Petr√≥polis`);
      this.logger.log(`   ‚Ä¢ ${bairrosPatyAlferes.length} bairros representados em Paty do Alferes`);
      this.logger.log(
        `   ‚Ä¢ Total de pontos em Petr√≥polis: ${bairrosPetropolis.reduce((sum, b) => sum + b.totalPontos, 0)}`
      );
      this.logger.log(
        `   ‚Ä¢ Total de pontos em Paty do Alferes: ${bairrosPatyAlferes.reduce((sum, b) => sum + b.totalPontos, 0)}`
      );

      // Mostrar os top 5 bairros para confirmar ranking
      const topBairros = bairrosStats.slice(0, 5);

      this.logger.log(`üèÜ Top 5 bairros no ranking por total de pontos dos usu√°rios:`);
      topBairros.forEach((bairro, index) => {
        this.logger.log(
          `   ${index + 1}¬∫ ${bairro.bairro} (${bairro.cidade}) - ${bairro.usuarios.length} usu√°rios, ${bairro.totalPontos} pontos`
        );
      });

      // Mostrar distribui√ß√£o de usu√°rios por bairro
      const usuariosFinais = await this.usersService.getRankingIndividual();
      this.logger.log(`üë• ${usuariosFinais.data.length} usu√°rios total distribu√≠dos pelos bairros`);
      this.logger.log(
        `üéØ Sistema de competi√ß√£o por bairros est√° ativo e funcional usando campos string!`
      );
    } catch (error) {
      this.logger.error('Erro ao criar usu√°rios:', error);
    }
  }

  private async seedRodadas() {
    try {
      this.logger.log('üóìÔ∏è Criando rodadas hist√≥ricas...');

      const agora = new Date();
      const rodadas = [];

      // Criar 10 rodadas: 7 finalizadas, 2 em andamento, 1 futura
      for (let i = 1; i <= 10; i++) {
        const dataInicio = new Date(agora);
        dataInicio.setDate(agora.getDate() - (10 - i) * 7);

        const dataFim = new Date(dataInicio);
        dataFim.setDate(dataInicio.getDate() + 6);

        const ativa = i === 8; // Rodada 8 est√° ativa

        rodadas.push({
          nome: `Rodada ${i}`,
          descricao: `Rodada ${i} do Campeonato Brasileiro`,
          dataInicio,
          dataFim,
          ativa,
        });
      }

      for (const rodada of rodadas) {
        await this.rodadasService.create(rodada);
      }

      this.logger.log(`‚úÖ ${rodadas.length} rodadas criadas!`);
    } catch (error) {
      this.logger.error('Erro ao criar rodadas:', error);
    }
  }

  private async seedJogos() {
    try {
      this.logger.log('‚öΩ Verificando jogos da API real...');

      // Verificar se j√° existem jogos no banco
      const jogosExistentes = await this.jogosService.findAll();

      if (jogosExistentes.length > 0) {
        this.logger.log(`üì¶ ${jogosExistentes.length} jogos j√° existem no banco`);
        return;
      }

      this.logger.log('üîÑ Tentando sincronizar jogos de hoje da API real...');

      // Sincronizar apenas hoje para inicializa√ß√£o
      const hoje = new Date().toISOString().split('T')[0];

      try {
        const resultado = await this.jogosService.forcarSincronizacao(hoje);
        this.logger.log(`‚úÖ Sincroniza√ß√£o: ${resultado.totalJogos} jogos encontrados para hoje`);
      } catch (error) {
        this.logger.warn('‚ö†Ô∏è Nenhum jogo encontrado para hoje na API, isso √© normal');
        this.logger.log(
          'üí° Use /api/jogos/sincronizar/{data} para sincronizar datas espec√≠ficas quando necess√°rio'
        );
      }
    } catch (error) {
      this.logger.warn(
        '‚ö†Ô∏è Erro ao verificar/sincronizar jogos (isso √© normal se a API estiver indispon√≠vel):',
        error.message
      );
    }
  }

  private async seedPalpites() {
    try {
      this.logger.log('üéØ Criando palpites hist√≥ricos...');

      const users = await this.usersService.getRankingIndividual();
      const jogosEncerrados = await this.jogosService.findAll();

      // Para cada jogo encerrado, criar palpites de alguns usu√°rios
      for (const jogo of jogosEncerrados.filter((j) => j.status === 'encerrado')) {
        // 60-80% dos usu√°rios fizeram palpites
        const numPalpites = Math.floor(users.data.length * (0.6 + Math.random() * 0.2));
        const usuariosQueVaoPalpitar = users.data
          .sort(() => Math.random() - 0.5)
          .slice(0, numPalpites);

        for (const user of usuariosQueVaoPalpitar) {
          // Gerar palpite realista
          const palpiteA = Math.floor(Math.random() * 4);
          const palpiteB = Math.floor(Math.random() * 4);

          // Calcular se acertou
          const acertouPlacar =
            jogo.resultado.timeA === palpiteA && jogo.resultado.timeB === palpiteB;

          const resultadoReal = this.getResultado(jogo.resultado.timeA, jogo.resultado.timeB);
          const resultadoPalpite = this.getResultado(palpiteA, palpiteB);
          const acertouResultado = resultadoReal === resultadoPalpite;

          // Calcular pontos
          let pontos = 0;
          let moedas = 0;

          if (acertouPlacar) {
            pontos = 10;
            moedas = 50;
          } else if (acertouResultado) {
            pontos = 3;
            moedas = 15;
          }

          try {
            const createPalpiteDto = {
              jogoId: (jogo as any)._id.toString(),
              timeA: palpiteA,
              timeB: palpiteB,
            };

            await this.palpitesService.create((user as any)._id.toString(), createPalpiteDto);
          } catch (error) {
            // Pular palpites duplicados ou outros erros
          }
        }
      }

      this.logger.log(`‚úÖ Palpites hist√≥ricos criados!`);
    } catch (error) {
      this.logger.error('Erro ao criar palpites:', error);
    }
  }

  private async seedTransacoes() {
    try {
      this.logger.log('üí∞ Criando hist√≥rico de transa√ß√µes...');

      const users = await this.usersService.getRankingIndividual();

      if (users.data.length === 0) {
        this.logger.log('üë• Nenhum usu√°rio encontrado, pulando transa√ß√µes...');
        return;
      }

      for (const user of users.data) {
        // Criar algumas transa√ß√µes hist√≥ricas para cada usu√°rio
        const numTransacoes = Math.floor(Math.random() * 15) + 5;

        for (let i = 0; i < numTransacoes; i++) {
          const dataTransacao = new Date();
          dataTransacao.setDate(dataTransacao.getDate() - Math.floor(Math.random() * 60));

          const tipoTransacao = Math.random() > 0.7 ? 'gasto' : 'ganho';

          if (tipoTransacao === 'ganho') {
            const quantidade = Math.floor(Math.random() * 150) + 15; // Valores mais generosos
            const origens = [
              'palpite_correto',
              'bonus_diario',
              'conquista',
              'primeira_vitoria',
              'sequencia_acertos',
            ];
            const origem = origens[Math.floor(Math.random() * origens.length)];

            await this.transacoesMoedasService.registrarGanho(
              user._id.toString(),
              origem,
              quantidade,
              `Moedas ganhas por ${origem.replace('_', ' ')}`
            );
          } else {
            const quantidade = Math.floor(Math.random() * 80) + 10;
            const origens = ['loja_avatar', 'loja_tema', 'boost_palpite', 'acesso_premium'];
            const origem = origens[Math.floor(Math.random() * origens.length)];

            await this.transacoesMoedasService.registrarGasto(
              user._id.toString(),
              origem,
              quantidade,
              `Compra: ${origem.replace('_', ' ')}`
            );
          }
        }
      }

      this.logger.log(`‚úÖ Hist√≥rico de transa√ß√µes criado para ${users.data.length} usu√°rios!`);
    } catch (error) {
      this.logger.error('Erro ao criar transa√ß√µes:', error);
    }
  }

  private getResultado(golsA: number, golsB: number): 'vitoria_a' | 'empate' | 'vitoria_b' {
    if (golsA > golsB) return 'vitoria_a';
    if (golsA < golsB) return 'vitoria_b';
    return 'empate';
  }

  /**
   * M√©todo p√∫blico para executar o seed manualmente
   * Use via endpoint ou console do Node.js
   */
  async executarSeedManual(): Promise<void> {
    this.logger.log('üîß Executando seed MANUALMENTE...');
    await this.seedAllData();
    this.logger.log('‚úÖ Seed manual finalizado!');
  }

  /**
   * M√©todo para limpar todos os dados antes de executar o seed
   */
  async limparEExecutarSeed(): Promise<void> {
    this.logger.log('üßπ Limpando dados existentes...');

    try {
      // Aqui voc√™ pode adicionar limpeza se necess√°rio
      // await this.usersService.deleteAll();

      this.logger.log('‚úÖ Dados limpos, executando seed...');
      await this.seedAllData();
      this.logger.log('‚úÖ Seed completo finalizado!');
    } catch (error) {
      this.logger.error('‚ùå Erro durante limpeza e seed:', error);
    }
  }
}
