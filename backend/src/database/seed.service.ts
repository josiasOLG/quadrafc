import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { JogosService } from '../modules/jogos/jogos.service';
import { PalpitesService } from '../modules/palpites/palpites.service';
import { RodadasService } from '../modules/rodadas/rodadas.service';
import { TransacoesMoedasService } from '../modules/transacoes-moedas/transacoes-moedas.service';
import { UsersService } from '../modules/users/users.service';
import { Jogo, JogoDocument } from '../shared/schemas/jogo.schema';
import { Palpite, PalpiteDocument } from '../shared/schemas/palpite.schema';
import { User, UserDocument } from '../shared/schemas/user.schema';

@Injectable()
export class SeedService implements OnModuleInit {
  private readonly logger = new Logger(SeedService.name);

  constructor(
    private configService: ConfigService,
    private usersService: UsersService,
    private rodadasService: RodadasService,
    private jogosService: JogosService,
    private palpitesService: PalpitesService,
    private transacoesMoedasService: TransacoesMoedasService,
    @InjectModel(Palpite.name) private palpiteModel: Model<PalpiteDocument>,
    @InjectModel(Jogo.name) private jogoModel: Model<JogoDocument>,
    @InjectModel(User.name) private userModel: Model<UserDocument>
  ) {}

  async onModuleInit() {
    const shouldSeed = this.configService.get('NODE_ENV') === 'development';

    this.logger.log(`üîç NODE_ENV: ${this.configService.get('NODE_ENV')}`);
    this.logger.log(`üîç Should seed: ${shouldSeed}`);

    if (shouldSeed) {
      // Verificar se j√° foi executado verificando apenas usu√°rios existentes
      const usersExistentes = await this.usersService.getRankingIndividual();

      this.logger.log(`üìä Estado atual: ${usersExistentes.data.length} usu√°rios`);

      // if (usersExistentes.data.length > 10) {
      //   this.logger.log('‚úÖ Seed j√° foi executado anteriormente - pulando execu√ß√£o');
      //   this.logger.log('üí° Para executar novamente, limpe o banco de dados primeiro');
      //   this.logger.log(`üìä Encontrados: ${usersExistentes.data.length} usu√°rios`);
      //   return;
      // }

      this.logger.log(
        'üå± Iniciando seed para criar APENAS usu√°rios fake com pontos entre 0 e 100...'
      );

      this.logger.log('‚úÖ Seed com usu√°rios fake finalizado!');
      this.logger.log('üîí Seed finalizado - n√£o executar√° novamente automaticamente');
    } else {
      this.logger.log('‚è∏Ô∏è Seed desabilitado - NODE_ENV n√£o √© development');
    }

    await this.seedAllData();
  }

  private async seedAllData() {
    try {
      // Verificar estado atual dos dados
      const usersExistentes = await this.usersService.getRankingIndividual();

      // const hasUsers = usersExistentes.data.length > 0;

      this.logger.log(
        'üèîÔ∏è Verificando dados para a regi√£o serrana - Petr√≥polis e Paty do Alferes...'
      );
      this.logger.log(`    Usu√°rios: ${usersExistentes.data.length} existentes`);

      // Se j√° tem usu√°rios, pular
      // if (hasUsers) {
      //   this.logger.log('‚úÖ Dados completos j√° existem, pulando seed...');
      //   return;
      // }

      // 1. Criar usu√°rios - √öNICO PASSO NECESS√ÅRIO
      this.logger.log('üë• Executando seed de usu√°rios...');
      // await this.seedUsers();

      // 2. Criar palpites para usu√°rios
      this.logger.log('üéØ Executando seed de palpites...');
      await this.seedPalpites();

      /* COMENTADO - N√ÉO NECESS√ÅRIO
      // 2. Criar rodadas hist√≥ricas
      await this.seedRodadas();

      // 3. Pular jogos (gerados pela API real)
      this.logger.log('‚öΩ Pulando cria√ß√£o de jogos - ser√£o sincronizados da API real');

      // 4. Criar palpites hist√≥ricos (s√≥ se houver jogos)
      const jogosExistentes = await this.jogosService.findAll();
      if (jogosExistentes.length > 0) {
        await this.seedPalpites();
      } else {
        this.logger.log('üéØ Pulando palpites - nenhum jogo encontrado ainda');
      }

      // 5. Criar transa√ß√µes de moedas
      await this.seedTransacoes();
      */
    } catch (error) {
      this.logger.error('‚ùå Erro durante o seed:', error);
    }
  }

  private async seedUsers() {
    try {
      this.logger.log('üë• Criando usu√°rios fake com pontos entre 0 e 100...');

      // Verificar quantos usu√°rios j√° existem para evitar duplicatas
      // const usersExistentes = await this.usersService.getRankingIndividual();
      // if (usersExistentes.data.length > 0) {
      //   this.logger.log(
      //     `‚ö†Ô∏è ${usersExistentes.data.length} usu√°rios j√° existem, pulando cria√ß√£o de usu√°rios para evitar duplicatas`
      //   );
      //   return;
      // }

      // Lista completa de bairros - Regi√£o Serrana do RJ (m√°ximo poss√≠vel das 3 cidades)
      const bairrosDisponiveis = [
        // Petr√≥polis - RJ (m√°ximo de bairros)
        { nome: 'Alcobacinha', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Alto da Serra', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Alto Independ√™ncia', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Bela Vista', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Bingen', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Bonsucesso', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Carangola', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Castel√¢nea', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Centro', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Ch√°cara Flora', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Caxambu', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Cremerie', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Corr√™as', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Duarte da Silveira', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Duchas', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Estrada da Saudade', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Fazenda Alpina', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Fazenda Inglesa', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Granja Guarani', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Herval', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Independ√™ncia', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Itaipava', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Itamarati', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Jardim Salvador', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Mosela', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Moinho Preto', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Nogueira', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Nova Cascatinha', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Parque S√£o Vicente', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Pedro do Rio', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Posse', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Provis√≥ria', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Quitandinha', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Retiro', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Roseiral', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'S√£o Pedro', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Secret√°rio', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Sim√©ria', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Sumidouro', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Taquara', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Valpara√≠so', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Vila Cristina', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Vila Felipe', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Vila Imperial', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Vila Real', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Washington Lu√≠s', cidade: 'Petr√≥polis', estado: 'RJ' },
        { nome: 'Zona Industrial', cidade: 'Petr√≥polis', estado: 'RJ' },

        // Paty do Alferes - RJ (m√°ximo de bairros)
        { nome: 'Centro', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Avelar', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Arcozelo', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Werneck', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Cacaria', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'S√£o Jos√© do Turvo', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Queluz de Minas', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Palmital', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Governador Portela', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'S√£o Jo√£o Marcos', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Banquete', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Bemposta', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Bela Vista', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Brasil√¢ndia', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Cabaceiras', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Fazenda da Ponte', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Ilhas', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Pedra Branca', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Rio de Janeiro Pequeno', cidade: 'Paty do Alferes', estado: 'RJ' },
        { nome: 'Santa Cruz', cidade: 'Paty do Alferes', estado: 'RJ' },

        // Miguel Pereira - RJ (m√°ximo de bairros)
        { nome: 'Centro', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Governador Portela', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Conrado', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Javary', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Vila Inhomirim', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Mo√ßas', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'V√°rzea dos P√°ssaros', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Vera Cruz', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Stela Maris', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Vila Rica', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Am√©lia', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Ant√¥nio de P√°dua', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Bairro da Esta√ß√£o', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Bairro do Col√©gio', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Bela Vista', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Coelhos', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Dutra', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Estiva', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Get√∫lio Vargas', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Graminha', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Jardim das Palmeiras', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Jardim de Alah', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Parque do Ing√°', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Parque Floresta', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Pedro Versiani', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Santa Rita', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'S√£o Jo√£o', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Vila Cabu√ßu', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Vila Oper√°ria', cidade: 'Miguel Pereira', estado: 'RJ' },
        { nome: 'Vale do Para√≠so', cidade: 'Miguel Pereira', estado: 'RJ' },
      ];

      this.logger.log(`ÔøΩ ${bairrosDisponiveis.length} bairros dispon√≠veis para os usu√°rios`);
      // Lista expandida com pelo menos 80 nomes masculinos + 20 femininos = 100+ usu√°rios
      const nomesMasculinos = [
        // Nomes masculinos brasileiros da regi√£o serrana do RJ
        'Alexandre Moreira Silva',
        'Anderson Pereira dos Santos',
        'Antonio Carlos Oliveira',
        'Bernardo Henrique Costa',
        'C√©sar Augusto Ferreira',
        'Danilo Jos√© Almeida',
        'Eduardo Ribeiro Lima',
        'Fabiano dos Santos Cruz',
        'Gabriel Martins Rocha',
        'Henrique Barbosa Nunes',
        'Igor Fernandes Cardoso',
        'Jo√£o Carlos Mendes',
        'Jos√© Roberto Ara√∫jo',
        'Klaus Eduardo Gomes',
        'Leandro Ant√¥nio Reis',
        'M√°rcio Luiz Teixeira',
        'Nelson Vinicius Correia',
        'Ot√°vio Henrique Miranda',
        'Paulo C√©sar Nascimento',
        'Quintino dos Santos Monteiro',
        'Roberto Carlos Vieira',
        'S√©rgio Augusto Caldeira',
        'Tiago Fernandes Machado',
        'Ulisses Gabriel Lopes',
        'Valter Hugo Cunha',
        'Wagner Eduardo Borges',
        'Xavier dos Santos Duarte',
        'Yago Henrique Melo',
        'Zacarias Antonio Farias',
        'Adriano Silva Carvalho',
        'Bruno C√©sar Torres',
        'Caio Roberto Pinto',
        'Diego Augusto Sales',
        'Emerson Luis Moraes',
        'Fernando Gabriel Castro',
        'Gustavo Ant√¥nio Azevedo',
        'Hugo dos Santos Pereira',
        'Ivan Eduardo Freitas',
        'Juliano C√©sar Ramos',
        'Kevin Gabriel Santana',
        'Lucas Henrique Campos',
        'Mauricio dos Santos Rodrigues',
        'Nathan Eduardo Fernandes',
        'Orlando C√©sar Moreira',
        'Pedro Augusto Barbosa',
        'Quirino Jos√© Alves',
        'Renato Luis Dias',
        'Sandro Henrique Ribeiro',
        'Thales Gabriel Martins',
        'Ubiratan dos Santos Gomes',
        // Adicionando mais nomes masculinos para totalizar 150+
        'Andr√© Luiz Monteiro',
        'Arthur C√©sar Nogueira',
        'Benedito Santos Lima',
        'Cl√°udio Roberto Figueiredo',
        'Daniel Eduardo Soares',
        'Evandro Jos√© Batista',
        'Francisco Carlos Maia',
        'Gilberto Antonio Leal',
        'Heitor Gabriel Pacheco',
        'Israel Fernando Barros',
        'Jadson Luis Moura',
        'Kleber dos Santos Viana',
        'Leonardo C√©sar Magalh√£es',
        'Marcos Vinicius Toledo',
        'Nilton Eduardo Farias',
        'Osmar Henrique Guedes',
        'Patrick Gabriel Rezende',
        'Robson Carlos Tavares',
        'Samuel Antonio Silveira',
        'Tadeu Fernando Costa',
        'Vagner Luis Peixoto',
        'Wesley Eduardo Macedo',
        'Yuri Gabriel Campos',
        'Zeferino dos Santos Rocha',
        'Alberto C√©sar Miranda',
        'Benjamin Luiz Freire',
        'Cristiano Jos√© Mendes',
        'Davi Eduardo Pereira',
        '√âlton Gabriel Santos',
        'Fabr√≠cio Luis Cardoso',
        'Gustavo Roberto Almeida',
        'Hamilton dos Santos Pereira',
        'Icaro Fernandes Costa',
        'Jefferson Carlos Lima',
        'Kennedy Eduardo Rocha',
        'Luciano Gabriel Martins',
        'Marcelo Antonio Silva',
        'Nicolau Fernando Santos',
        'Osvaldo Luis Barbosa',
        'Paulo Roberto Gomes',
        'Rodrigo C√©sar Oliveira',
        'Sebasti√£o Eduardo Reis',
        'Teodoro Gabriel Cunha',
        'Vinicius dos Santos Torres',
        'William C√©sar Moreira',
        'Ximenes Gabriel Lopes',
        'Yves Antonio Caldeira',
        'Zacharias Luis Machado',
        'Alan Eduardo Carvalho',
        'Bento Gabriel Pinto',
        'Carlos Roberto Sales',
        'Diogo Luis Moraes',
        'Elias Eduardo Castro',
        'Felipe Gabriel Azevedo',
        'Geraldo dos Santos Freitas',
        'Hermes C√©sar Ramos',
        'Ivo Gabriel Santana',
        'Jair Eduardo Campos',
        'Kelvin dos Santos Rodrigues',
        'Lauro Gabriel Fernandes',
        'Milton C√©sar Moreira',
        'Norberto Eduardo Nogueira',
        'Oscar Gabriel Figueiredo',
        'Plinio Luis Soares',
        'Raul Eduardo Batista',
        'Silvio Gabriel Maia',
        'Tomaz C√©sar Leal',
        'Urbano dos Santos Pacheco',
        'Valdir Eduardo Barros',
        'Waldemar Gabriel Moura',
        'Xico dos Santos Viana',
        'Ademir Jos√© Gon√ßalves',
        'Bas√≠lio Carlos Mendes',
        'Celso Roberto Ara√∫jo',
        'Domingos Eduardo Gomes',
        'Ernesto Gabriel Reis',
        'F√°bio dos Santos Teixeira',
        'Gerson Luis Correia',
        'Haroldo C√©sar Miranda',
        'Ismael Gabriel Nascimento',
        'Jaime dos Santos Monteiro',
        'L√°zaro Eduardo Vieira',
        'Murilo Gabriel Caldeira',
        'Newton dos Santos Machado',
        'Oldair C√©sar Lopes',
        'Paulino Gabriel Cunha',
        'Ronaldo dos Santos Borges',
        'Silas Eduardo Duarte',
        'Teod√≥sio Gabriel Melo',
        'Valdomiro dos Santos Farias',
        'Wanderlei C√©sar Carvalho',
        'Xavier Eduardo Torres',
        'Yago dos Santos Pinto',
        'Z√©lio Gabriel Sales',
      ];

      const nomesFemininos = [
        // 20+ nomes femininos para completar os 100+ usu√°rios
        'Ana Carolina Silva',
        'Beatriz Santos Oliveira',
        'Camila Ferreira Costa',
        'Daniela Pereira Lima',
        'Eduarda Ribeiro Rocha',
        'Fernanda dos Santos Cruz',
        'Gabriela Martins Almeida',
        'Helena Barbosa Nunes',
        'Isabela Fernandes Cardoso',
        'Juliana Carlos Mendes',
        'Karla Roberto Ara√∫jo',
        'Larissa Eduardo Gomes',
        'Mariana Ant√¥nio Reis',
        'Nat√°lia Luiz Teixeira',
        'Olivia Vinicius Correia',
        'Patr√≠cia Henrique Miranda',
        'Rafaela C√©sar Nascimento',
        'Sabrina dos Santos Monteiro',
        'Tatiana Carlos Vieira',
        'Vanessa Augusto Caldeira',
        'Bianca Fernandes Machado',
        'Carolina Gabriel Lopes',
        'D√©bora Hugo Cunha',
        'Elaine Eduardo Borges',
      ];

      // Concatenar listas mantendo propor√ß√£o de 80% masculinos
      const todosOsNomes = [...nomesMasculinos, ...nomesFemininos];

      this.logger.log(
        `üë• Total de ${todosOsNomes.length} nomes dispon√≠veis (${nomesMasculinos.length} masculinos, ${nomesFemininos.length} femininos)`
      );
      this.logger.log(
        `üìä Propor√ß√£o: ${((nomesMasculinos.length / todosOsNomes.length) * 100).toFixed(1)}% masculinos`
      );

      for (let i = 0; i < todosOsNomes.length; i++) {
        const nome = todosOsNomes[i];
        const email =
          nome
            .toLowerCase()
            .replace(/\s+/g, '.')
            .replace(/√ß/g, 'c')
            .replace(/[√°√†√£√¢]/g, 'a')
            .replace(/[√©√™√´]/g, 'e')
            .replace(/[√≠√Æ√Ø]/g, 'i')
            .replace(/[√≥√¥√µ√∂]/g, 'o')
            .replace(/[√∫√ª√º]/g, 'u') + '@email.com';

        const bairro = bairrosDisponiveis[Math.floor(Math.random() * bairrosDisponiveis.length)];

        // MODIFICADO: Pontos limitados entre 0 e 100
        const totalPoints = Math.floor(Math.random() * 101); // 0 a 100
        const moedas = Math.floor(totalPoints * 0.5) + Math.floor(Math.random() * 20); // Reduzido

        // Remover medalhas complexas
        const medalhas = [];
        if (totalPoints > 50) medalhas.push('Iniciante');
        if (totalPoints > 75) medalhas.push('Participante');
        if (totalPoints > 90) medalhas.push('Entusiasta');

        this.logger.debug(
          `üë§ Criando usu√°rio ${i + 1}/${todosOsNomes.length}: ${nome} (${bairro.nome}, ${bairro.cidade}) - ${totalPoints} pontos`
        );

        // Criar usu√°rio
        await this.usersService.create({
          nome: nome,
          email,
          password: '123456', // Senha padr√£o para testes
          // Campos do onboarding para usu√°rios de seed
          data_nascimento: new Date(
            1985 + Math.floor(Math.random() * 25),
            Math.floor(Math.random() * 12),
            Math.floor(Math.random() * 28) + 1
          ),
          telefone: `(24) 9${Math.floor(Math.random() * 10000)
            .toString()
            .padStart(4, '0')}-${Math.floor(Math.random() * 10000)
            .toString()
            .padStart(4, '0')}`,
          cidade: bairro.cidade,
          estado: bairro.estado,
          bairro: bairro.nome, // Agora usando apenas o nome do bairro como string
        });

        // Atualizar pontos e moedas do usu√°rio criado
        const user = await this.usersService.findByEmail(email);
        if (user) {
          user.totalPoints = totalPoints;
          user.moedas = moedas;
          user.medals = medalhas;
          await user.save();

          this.logger.debug(
            `‚úÖ Usu√°rio ${nome} (${totalPoints} pts) criado no bairro ${bairro.nome}`
          );
        }

        // Log de progresso a cada 10 usu√°rios
        if ((i + 1) % 10 === 0) {
          this.logger.log(`üìà Progresso: ${i + 1}/${todosOsNomes.length} usu√°rios criados`);
        }
      }

      this.logger.log(`‚úÖ ${todosOsNomes.length} usu√°rios fake criados com pontos entre 0 e 100!`);
    } catch (error) {
      this.logger.error('Erro ao criar usu√°rios:', error);
    }
  }

  /**
   * COMENTADO - N√£o necess√°rio para a cria√ß√£o apenas de usu√°rios fake
   */
  /*
  private async seedRodadas() {
    try {
      this.logger.log('üóìÔ∏è Criando rodadas hist√≥ricas...');

      const agora = new Date();
      const rodadas = [];

      // Criar 10 rodadas: 7 finalizadas, 2 em andamento, 1 futura
      for (let i = 1; i <= 10; i++) {
        const dataInicio = new Date(agora);
        dataInicio.setDate(agora.getDate() - (10 - i) * 7);

        const dataFim = new Date(dataInicio);
        dataFim.setDate(dataInicio.getDate() + 6);

        const ativa = i === 8; // Rodada 8 est√° ativa

        rodadas.push({
          nome: `Rodada ${i}`,
          descricao: `Rodada ${i} do Campeonato Brasileiro`,
          dataInicio,
          dataFim,
          ativa,
        });
      }

      for (const rodada of rodadas) {
        await this.rodadasService.create(rodada);
      }

      this.logger.log(`‚úÖ ${rodadas.length} rodadas criadas!`);
    } catch (error) {
      this.logger.error('Erro ao criar rodadas:', error);
    }
  }

  private async seedJogos() {
    try {
      this.logger.log('‚öΩ Verificando jogos da API real...');

      // Verificar se j√° existem jogos no banco
      const jogosExistentes = await this.jogosService.findAll();

      if (jogosExistentes.length > 0) {
        this.logger.log(`üì¶ ${jogosExistentes.length} jogos j√° existem no banco`);
        return;
      }

      this.logger.log('üîÑ Tentando sincronizar jogos de hoje da API real...');

      // Sincronizar apenas hoje para inicializa√ß√£o
      const hoje = new Date().toISOString().split('T')[0];

      try {
        const resultado = await this.jogosService.forcarSincronizacao(hoje);
        this.logger.log(`‚úÖ Sincroniza√ß√£o: ${resultado.totalJogos} jogos encontrados para hoje`);
      } catch (error) {
        this.logger.warn('‚ö†Ô∏è Nenhum jogo encontrado para hoje na API, isso √© normal');
        this.logger.log(
          'üí° Use /api/jogos/sincronizar/{data} para sincronizar datas espec√≠ficas quando necess√°rio'
        );
      }
    } catch (error) {
      this.logger.warn(
        '‚ö†Ô∏è Erro ao verificar/sincronizar jogos (isso √© normal se a API estiver indispon√≠vel):',
        error.message
      );
    }
  }



  private async seedTransacoes() {
    try {
      this.logger.log('üí∞ Criando hist√≥rico de transa√ß√µes...');

      const users = await this.usersService.getRankingIndividual();

      if (users.data.length === 0) {
        this.logger.log('üë• Nenhum usu√°rio encontrado, pulando transa√ß√µes...');
        return;
      }

      for (const user of users.data) {
        // Criar algumas transa√ß√µes hist√≥ricas para cada usu√°rio
        const numTransacoes = Math.floor(Math.random() * 15) + 5;

        for (let i = 0; i < numTransacoes; i++) {
          const dataTransacao = new Date();
          dataTransacao.setDate(dataTransacao.getDate() - Math.floor(Math.random() * 60));

          const tipoTransacao = Math.random() > 0.7 ? 'gasto' : 'ganho';

          if (tipoTransacao === 'ganho') {
            const quantidade = Math.floor(Math.random() * 150) + 15; // Valores mais generosos
            const origens = [
              'palpite_correto',
              'bonus_diario',
              'conquista',
              'primeira_vitoria',
              'sequencia_acertos',
            ];
            const origem = origens[Math.floor(Math.random() * origens.length)];

            await this.transacoesMoedasService.registrarGanho(
              user._id.toString(),
              origem,
              quantidade,
              `Moedas ganhas por ${origem.replace('_', ' ')}`
            );
          } else {
            const quantidade = Math.floor(Math.random() * 80) + 10;
            const origens = ['loja_avatar', 'loja_tema', 'boost_palpite', 'acesso_premium'];
            const origem = origens[Math.floor(Math.random() * origens.length)];

            await this.transacoesMoedasService.registrarGasto(
              user._id.toString(),
              origem,
              quantidade,
              `Compra: ${origem.replace('_', ' ')}`
            );
          }
        }
      }

      this.logger.log(`‚úÖ Hist√≥rico de transa√ß√µes criado para ${users.data.length} usu√°rios!`);
    } catch (error) {
      this.logger.error('Erro ao criar transa√ß√µes:', error);
    }
  }

  private getResultado(golsA: number, golsB: number): 'vitoria_a' | 'empate' | 'vitoria_b' {
    if (golsA > golsB) return 'vitoria_a';
    if (golsA < golsB) return 'vitoria_b';
    return 'empate';
  }

  /**
   * M√©todo p√∫blico para executar o seed manualmente
   * Use via endpoint ou console do Node.js
   */
  async executarSeedManual(): Promise<void> {
    this.logger.log('üîß Executando seed MANUALMENTE...');
    await this.seedAllData();
    this.logger.log('‚úÖ Seed manual finalizado!');
  }

  /**
   * M√©todo para limpar todos os dados antes de executar o seed
   */
  async limparEExecutarSeed(): Promise<void> {
    this.logger.log('üßπ Limpando dados existentes...');

    try {
      // Aqui voc√™ pode adicionar limpeza se necess√°rio
      // await this.usersService.deleteAll();

      this.logger.log('‚úÖ Dados limpos, executando seed...');
      await this.seedAllData();
      this.logger.log('‚úÖ Seed completo finalizado!');
    } catch (error) {
      this.logger.error('‚ùå Erro durante limpeza e seed:', error);
    }
  }

  /**
   * Criar palpites para todos os usu√°rios nos jogos reais
   */
  private async seedPalpites(): Promise<void> {
    try {
      // Verificar se j√° existem palpites usando o modelo
      const existingPalpites = await this.palpiteModel.countDocuments();
      if (existingPalpites > 0) {
        this.logger.log(
          'üéØ Palpites j√° existem no banco de dados - verificando campeonatos dos usu√°rios...'
        );

        // Verificar se os usu√°rios j√° t√™m campeonatos preenchidos
        const usersComCampeonatos = await this.userModel.countDocuments({
          campeonatos: { $exists: true, $ne: [] },
        });

        if (usersComCampeonatos > 0) {
          this.logger.log(
            `‚úÖ ${usersComCampeonatos} usu√°rios j√° possuem campeonatos - pulando atualiza√ß√£o`
          );
          return;
        }

        this.logger.log('üîÑ Atualizando campeonatos dos usu√°rios existentes...');
        await this.atualizarCampeonatosUsuarios();
        return;
      }

      this.logger.log('üéØ Iniciando cria√ß√£o de palpites...');

      // Buscar todos os jogos reais do banco de dados com informa√ß√µes do campeonato
      const jogos = await this.jogoModel.find().select('_id campeonato').exec();

      if (jogos.length === 0) {
        this.logger.warn('‚ùå Nenhum jogo encontrado no banco de dados para criar palpites');
        return;
      }

      // Log dos campeonatos √∫nicos encontrados
      const campeonatosUnicos = [...new Set(jogos.map((j) => j.campeonato).filter(Boolean))];
      this.logger.log(`üèÜ Campeonatos dispon√≠veis: ${campeonatosUnicos.join(', ')}`);

      // Buscar TODOS os usu√°rios diretamente do banco sem limita√ß√£o
      const users = await this.userModel.find({}).select('_id nome').exec();

      if (users.length === 0) {
        this.logger.warn('‚ùå Nenhum usu√°rio encontrado para criar palpites');
        return;
      }

      this.logger.log(`üë• ${users.length} usu√°rios encontrados`);
      this.logger.log(`‚öΩ ${jogos.length} jogos reais dispon√≠veis para palpites`);

      let totalPalpitesCriados = 0;
      const palpitesParaInserir = [];
      const usersParaAtualizar = new Map();

      // GARANTIR QUE TODOS OS USU√ÅRIOS FA√áAM PALPITES
      for (let i = 0; i < users.length; i++) {
        const user = users[i];
        const userCampeonatos = new Set();

        // MODIFICADO: Cada usu√°rio far√° palpites em uma quantidade aleat√≥ria de jogos (entre 5 e 15)
        // Mas garantindo que TODOS os usu√°rios fa√ßam pelo menos alguns palpites
        const quantidadeJogos = Math.min(
          Math.floor(Math.random() * 11) + 5, // 5 a 15 jogos (reduzido para garantir que todos participem)
          jogos.length // N√£o pode exceder o total de jogos dispon√≠veis
        );

        // Se n√£o h√° jogos suficientes, cada usu√°rio far√° palpite em TODOS os jogos dispon√≠veis
        const jogosEscolhidos =
          jogos.length <= 15
            ? [...jogos] // Todos os jogos se h√° poucos
            : this.shuffleArray([...jogos]).slice(0, quantidadeJogos); // Sele√ß√£o aleat√≥ria se h√° muitos

        this.logger.debug(
          `üë§ Usu√°rio ${i + 1}/${users.length} (${user.nome}): ${jogosEscolhidos.length} palpites`
        );

        // Para cada jogo escolhido
        for (const jogo of jogosEscolhidos) {
          // Gerar palpite aleat√≥rio seguindo o schema
          const golsTimeA = Math.floor(Math.random() * 4); // 0 a 3 gols
          const golsTimeB = Math.floor(Math.random() * 4); // 0 a 3 gols

          const palpite = {
            userId: user._id,
            jogoId: jogo._id,
            palpite: {
              timeA: golsTimeA,
              timeB: golsTimeB,
            },
            pontos: 0, // Mantido em 0 conforme solicitado
            acertouPlacar: Math.random() > 0.85, // 15% de chance de acertar placar exato
            acertouResultado: Math.random() > 0.4, // 60% de chance de acertar resultado
            moedasGanhas: Math.floor(Math.random() * 50), // 0 a 49 moedas
          };

          palpitesParaInserir.push(palpite);
          totalPalpitesCriados++;

          // Adicionar campeonato √∫nico √† lista do usu√°rio (verifica√ß√£o mais robusta)
          if (jogo.campeonato && jogo.campeonato.trim() !== '') {
            userCampeonatos.add(jogo.campeonato.trim());
          }
        }

        // GARANTIR que TODOS os usu√°rios sejam armazenados para atualiza√ß√£o
        // Mesmo que n√£o tenham campeonatos v√°lidos, registra para debug
        const campeonatosArray = Array.from(userCampeonatos);
        if (campeonatosArray.length > 0) {
          usersParaAtualizar.set(user._id.toString(), campeonatosArray);

          // Log de debug para os primeiros 5 usu√°rios
          if (i < 5) {
            this.logger.debug(`üë§ ${user.nome}: ${campeonatosArray.join(', ')}`);
          }
        } else {
          // Log de warning se usu√°rio n√£o tem campeonatos
          this.logger.warn(
            `‚ö†Ô∏è Usu√°rio ${user.nome} n√£o recebeu campeonatos - jogos sem campeonato v√°lido`
          );
        }

        // Log de progresso a cada 20 usu√°rios
        if ((i + 1) % 20 === 0) {
          this.logger.log(`üìà Progresso: ${i + 1}/${users.length} usu√°rios processados`);
        }
      }

      this.logger.log(
        `üìä Resumo: ${users.length} usu√°rios processados, ${usersParaAtualizar.size} receber√£o campeonatos`
      );

      // Inserir todos os palpites de uma vez para melhor performance
      this.logger.log('üíæ Inserindo palpites no banco de dados...');
      await this.palpiteModel.insertMany(palpitesParaInserir);

      // Atualizar propriedade campeonatos para cada usu√°rio
      this.logger.log(`üèÜ Atualizando campeonatos para ${usersParaAtualizar.size} usu√°rios...`);
      let usersAtualizados = 0;
      let errosUpdate = 0;

      for (const [userId, campeonatos] of usersParaAtualizar) {
        try {
          const resultado = await this.userModel.findByIdAndUpdate(
            userId,
            {
              $addToSet: {
                campeonatos: { $each: campeonatos },
              },
            },
            { new: true, select: 'nome campeonatos' }
          );

          if (resultado) {
            usersAtualizados++;

            // Log de debug para os primeiros 5 usu√°rios
            if (usersAtualizados <= 5) {
              this.logger.debug(
                `‚úÖ ${resultado.nome}: ${resultado.campeonatos?.join(', ') || 'nenhum'}`
              );
            }
          } else {
            this.logger.warn(`‚ö†Ô∏è Usu√°rio ${userId} n√£o encontrado para atualiza√ß√£o`);
            errosUpdate++;
          }
        } catch (error) {
          this.logger.error(`‚ùå Erro ao atualizar usu√°rio ${userId}:`, error.message);
          errosUpdate++;
        }
      }

      this.logger.log(`‚úÖ ${totalPalpitesCriados} palpites criados com sucesso!`);
      this.logger.log(
        `üèÜ ${usersAtualizados} de ${users.length} usu√°rios atualizados com campeonatos √∫nicos`
      );
      if (errosUpdate > 0) {
        this.logger.warn(`‚ö†Ô∏è ${errosUpdate} erros durante atualiza√ß√£o de usu√°rios`);
      }

      // Verifica√ß√£o final - contar usu√°rios sem campeonatos
      const usersSemCampeonatos = users.length - usersAtualizados;
      if (usersSemCampeonatos > 0) {
        this.logger.warn(
          `‚ö†Ô∏è ${usersSemCampeonatos} usu√°rios ficaram sem campeonatos (poss√≠vel problema nos dados de jogos)`
        );
      }

      this.logger.log(
        `üìä M√©dia de ${(totalPalpitesCriados / users.length).toFixed(1)} palpites por usu√°rio`
      );
    } catch (error) {
      this.logger.error('‚ùå Erro ao criar palpites:', error);
      throw error;
    }
  }

  private async atualizarCampeonatosUsuarios(): Promise<void> {
    try {
      this.logger.log('üîÑ Buscando todos os usu√°rios para atualizar campeonatos...');

      // Buscar TODOS os usu√°rios diretamente
      const todosOsUsuarios = await this.userModel.find({}).select('_id nome').exec();
      this.logger.log(`üë• Total de ${todosOsUsuarios.length} usu√°rios encontrados no banco`);

      // Buscar todos os palpites com informa√ß√µes dos jogos
      const palpitesComJogos = await this.palpiteModel.aggregate([
        {
          $lookup: {
            from: 'jogos',
            localField: 'jogoId',
            foreignField: '_id',
            as: 'jogo',
          },
        },
        {
          $unwind: '$jogo',
        },
        {
          $group: {
            _id: '$userId',
            campeonatos: { $addToSet: '$jogo.campeonato' },
          },
        },
      ]);

      this.logger.log(`üéØ ${palpitesComJogos.length} usu√°rios t√™m palpites no banco`);

      let usersAtualizados = 0;

      for (const item of palpitesComJogos) {
        const campeonatosLimpos = item.campeonatos.filter((c) => c && c.trim() !== '');

        if (campeonatosLimpos.length > 0) {
          const resultado = await this.userModel.findByIdAndUpdate(
            item._id,
            {
              $addToSet: {
                campeonatos: { $each: campeonatosLimpos },
              },
            },
            { new: true, select: 'nome campeonatos' }
          );

          if (resultado) {
            usersAtualizados++;

            // Log para os primeiros 5 usu√°rios
            if (usersAtualizados <= 5) {
              this.logger.debug(
                `‚úÖ ${resultado.nome}: ${resultado.campeonatos?.join(', ') || 'nenhum'}`
              );
            }
          }
        }
      }

      this.logger.log(
        `üîÑ ${usersAtualizados} de ${todosOsUsuarios.length} usu√°rios atualizados com campeonatos`
      );

      const usersSemPalpites = todosOsUsuarios.length - palpitesComJogos.length;
      if (usersSemPalpites > 0) {
        this.logger.warn(`‚ö†Ô∏è ${usersSemPalpites} usu√°rios n√£o t√™m palpites no banco`);
      }
    } catch (error) {
      this.logger.error('‚ùå Erro ao atualizar campeonatos dos usu√°rios:', error);
    }
  }

  private shuffleArray<T>(array: T[]): T[] {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }
}
